{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeffe\\\\Desktop\\\\react-app\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./styles.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport patientData from \"./patients.json\";\nimport orderData from \"./orders.json\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { Typography } from '@material-ui/core';\nimport { CardActions } from '@material-ui/core';\nimport { CardContent } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const patients = patientData;\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [dialogId, setDialogId] = React.useState(0);\n  const [isEditable, setIsEditable] = React.useState(false); // const [currentOrder, setCurrentOrder] = React.useState(\"\");\n\n  const [ordersData, setOrdersData] = React.useState(orderData); // var orders = orderData;\n  // console.log({ patientData });\n\n  const useStyles = makeStyles({\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  });\n  const classes = useStyles();\n\n  const handleEdit = () => {\n    console.log(\"I am here\");\n    setIsEditable(!isEditable);\n  };\n\n  const styles = {\n    paper: {\n      minHeight: '80vh',\n      maxHeight: '80vh',\n      minWidth: '80vh',\n      maxWidth: '80vh'\n    }\n  };\n\n  const handleClickOpen = id => {\n    setIsOpen(true);\n    setDialogId(id); // setOrdersData(ordersData[id].Message);\n\n    console.log(id);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const patientList = patients.map((patient, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"patientName\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      id: id,\n      onClick: () => handleClickOpen(id),\n      children: patient.Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this));\n\n  function changeToNewOrders(changedMessage, id, ordersData) {\n    let newOrdersData = [...ordersData];\n    let newOrder = { ...newOrdersData[id]\n    };\n    newOrder.Message = changedMessage;\n    newOrdersData[id] = newOrder;\n    return {\n      newOrdersData\n    };\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Patient list and orders\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card-body-left\",\n          children: [/*#__PURE__*/_jsxDEV(Card, {\n            size: \"large\",\n            children: patientList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n            onClose: handleClose,\n            open: isOpen,\n            \"aria-labelledby\": \"customized-dialog-title\",\n            classes: {} // modal = {true}\n            // autoDetectWindowHeight={false} \n            // autoScrollBodyContent={false}\n            // contentStyle={{width: \"100%\", maxWidth: \"none\"}}\n            ,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              className: \"card\",\n              variant: \"outlined\",\n              children: [/*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  className: \"cardContent\",\n                  color: \"textSecondary\",\n                  gutterBottom: true,\n                  children: \"Editing orders...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  id: dialogId,\n                  label: patients[dialogId].Name,\n                  disabled: !isEditable,\n                  value: ordersData[dialogId].Message // onChange={(e) => setOrdersData(e.target.value)}\n                  ,\n                  onChange: e => setOrdersData(changeToNewOrders(e.target.value, dialogId, ordersData)),\n                  onBlur: () => setIsEditable(false)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [\"input = \", ordersData[dialogId].Message]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"small\",\n                  variant: \"contained\",\n                  onClick: handleEdit,\n                  color: \"primary\",\n                  startIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 32\n                  }, this),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8vGs4OuZRc5R0+g85dOhHBbK+CE=\", true);\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jeffe/Desktop/react-app/my-app/src/App.js"],"names":["React","Button","Card","patientData","orderData","ButtonGroup","SaveIcon","EditIcon","Dialog","Typography","CardActions","CardContent","TextField","makeStyles","App","patients","isOpen","setIsOpen","useState","dialogId","setDialogId","isEditable","setIsEditable","ordersData","setOrdersData","useStyles","root","display","alignItems","justifyContent","classes","handleEdit","console","log","styles","paper","minHeight","maxHeight","minWidth","maxWidth","handleClickOpen","id","handleClose","patientList","map","patient","Name","changeToNewOrders","changedMessage","newOrdersData","newOrder","Message","e","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport patientData from \"./patients.json\";\nimport orderData from \"./orders.json\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { Typography } from '@material-ui/core';\nimport { CardActions } from '@material-ui/core';\nimport { CardContent } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport default function App() {\n  const patients = patientData;\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [dialogId, setDialogId] = React.useState(0);\n  const [isEditable, setIsEditable] = React.useState(false);\n  // const [currentOrder, setCurrentOrder] = React.useState(\"\");\n  const [ordersData, setOrdersData] = React.useState(orderData);\n\n  // var orders = orderData;\n  // console.log({ patientData });\n\n  const useStyles = makeStyles({\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    }\n  });\n  const classes = useStyles();\n\n  const handleEdit = () => {\n    console.log(\"I am here\");\n    setIsEditable(!isEditable);\n  };\n\n  const styles = {\n    paper: {\n      minHeight: '80vh',\n      maxHeight: '80vh',\n      minWidth: '80vh',\n      maxWidth: '80vh',\n    },\n  };\n\n  const handleClickOpen = (id) => {\n    setIsOpen(true);\n    setDialogId(id);\n    // setOrdersData(ordersData[id].Message);\n    console.log(id);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const patientList = patients.map((patient, id) => (\n    <div class=\"patientName\">\n      <Button variant=\"outlined\" id={id} onClick={() => handleClickOpen(id)}>\n        {patient.Name}\n      </Button>\n    </div>\n  ));\n\n  function changeToNewOrders(changedMessage, id, ordersData) {\n    let newOrdersData = [...ordersData];\n    let newOrder = {...newOrdersData[id]};\n    newOrder.Message = changedMessage;\n    newOrdersData[id] = newOrder;\n    return { newOrdersData };\n  };\n\n  return (\n    <div className=\"App\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h1>Patient list and orders</h1>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"card-body-left\">\n            <Card size=\"large\">{patientList}</Card>\n            <Dialog\n              onClose={handleClose}\n              open={isOpen}\n              aria-labelledby=\"customized-dialog-title\"\n              classes={{}}\n            // modal = {true}\n            // autoDetectWindowHeight={false} \n            // autoScrollBodyContent={false}\n            // contentStyle={{width: \"100%\", maxWidth: \"none\"}}\n            >\n              <Card className='card' variant=\"outlined\">\n                <CardContent>\n                  <Typography\n                    className='cardContent'\n                    color=\"textSecondary\"\n                    gutterBottom\n                  >\n                    Editing orders...\n                  </Typography>\n                  <TextField\n                    id={dialogId}\n                    label={patients[dialogId].Name}\n                    disabled={!isEditable}\n                    value={ordersData[dialogId].Message}\n                    // onChange={(e) => setOrdersData(e.target.value)}\n                    onChange={(e) => setOrdersData(changeToNewOrders(e.target.value, dialogId, ordersData))}\n                    onBlur={() => setIsEditable(false)}\n                  />\n                  <div>input = {ordersData[dialogId].Message}</div>\n                </CardContent>\n                <CardActions>\n                  <Button size=\"small\"\n                    variant=\"contained\"\n                    onClick={handleEdit}\n                    color=\"primary\"\n                    startIcon={<EditIcon />}>\n                    Edit\n                  </Button>\n                </CardActions>\n              </Card>\n            </Dialog>\n          </div>\n          {/* <div class=\"card-body-right\">\n            <div>order</div>\n            <div class=\"order-button\">\n              <ButtonGroup variant=\"contained\">\n                <Button color=\"primary\" startIcon={<EditIcon />}>\n                  Edit\n                </Button>\n                <Button color=\"secondary\" startIcon={<SaveIcon />}>\n                  Save\n                </Button>\n              </ButtonGroup>\n            </div>\n          </div> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}