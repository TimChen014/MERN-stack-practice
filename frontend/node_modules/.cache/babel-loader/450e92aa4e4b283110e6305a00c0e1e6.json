{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeffe\\\\Desktop\\\\react-app\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport \"./styles.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, CardActions, CardContent, TextField } from \"@material-ui/core\";\nimport Box from '@material-ui/core/Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [patients, setPatientsState] = React.useState([]);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [orderId, setOrderId] = React.useState(0);\n  const [isEditable, setIsEditable] = React.useState(false);\n  const [prevOrdersData, setOrdersData] = React.useState([]);\n  const [isReady, setIsReady] = React.useState(false);\n  const useStyles = makeStyles({\n    root: {\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n      opacity: '90%',\n      borderRadius: 5,\n      border: 0,\n      color: 'white',\n      height: 48,\n      padding: '0 30px',\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n      fontWeight: 'bold',\n      transition: \"0.1s cubic-bezier(.17, .67, .83, .67)\",\n      '&:hover': {\n        background: \"#fff\",\n        color: \"rgb(39,39,39)\",\n        transform: \"scale(1.1) translateY(-3px)\",\n        boxShadow: '0 3px 5px 2px rgba(232, 232, 232, .3)'\n      }\n    },\n    cards: {\n      backgroundColor: 'transparent',\n      width: '100%',\n      height: '100%',\n      overflow: 'true',\n      margin: '0 30px'\n    },\n    flex: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"flex-right\",\n      position: \"absolute\"\n    },\n    buttonSpacing: {\n      mx: \"auto\",\n      px: \"auto\",\n      display: \"flex\"\n    }\n  });\n\n  async function getData(url) {\n    const data = await fetch(url, {\n      method: 'GET'\n    }).then(res => {\n      return res.json();\n    }).catch(err => {\n      return err;\n    });\n    return data;\n  }\n\n  ;\n\n  function updataData(url, data) {\n    fetch(url, {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data),\n      mode: 'cors'\n    }).then(response => {\n      return response.json();\n    }).catch(err => {\n      return err;\n    });\n  }\n\n  ;\n  useEffect(async () => {\n    var loadedOrders = await getData('http://localhost:4000/juboProject/orders');\n    var loadedPatients = await getData('http://localhost:4000/juboProject/patients');\n    setOrdersData(loadedOrders);\n    setPatientsState(loadedPatients);\n    setIsReady(true);\n  }, []);\n  const classes = useStyles();\n\n  const handleEdit = () => {\n    setIsEditable(!isEditable);\n  };\n\n  const handleAdd = () => {\n    setIsEditable(!isEditable);\n  };\n\n  const handleClickOpen = id => {\n    setIsOpen(true);\n    setOrderId(id);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  }; // const handleRemove = () => {\n  //   deleteOrder();\n  // };\n\n\n  const patientList = patients.map((patient, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patientName\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      className: \"patientButton\",\n      variant: \"outlined\",\n      size: \"large\",\n      classes: {\n        root: classes.root,\n        cardHovered: classes.root\n      },\n      onClick: () => handleClickOpen(id),\n      children: patient.Name\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this)); // const orderList = prevOrdersData[patientId].Message.map((order, orderId) => (\n  //   if (orderId === 0) {\n  //   <div className=\"orderList\">\n  //     <TextField>\n  //       key={orderId}\n  //       label={patients[orderId].Name}\n  //       disabled={!isEditable}\n  //       value={prevOrdersData[orderId].Message}\n  //       onChange={e => setOrdersData(prevOrdersData => {\n  //         var _prevOrdersData = prevOrdersData;\n  //         _prevOrdersData[orderId].Message = e.target.value;\n  //         updataData(`http://localHost:4000/juboProject/orders`, _prevOrdersData[orderId]);\n  //         return [..._prevOrdersData];\n  //       })}\n  //       onBlur={() => setIsEditable(false)}\n  //       fullWidth=\"true\"\n  //                         maxWidth={'md'}\n  //       variant=\"outlined\"\n  //             </TextField>\n  //   </div>\n  // } else {\n  //   <div className=\"orderList\">\n  //     <TextField>\n  //       key={orderId}\n  //       label={patients[orderId].Name}\n  //       disabled={!isEditable}\n  //       value={prevOrdersData[orderId].Message}\n  //       onChange={e => setOrdersData(prevOrdersData => {\n  //         var _prevOrdersData = prevOrdersData;\n  //         _prevOrdersData[orderId].Message = e.target.value;\n  //         updataData(`http://localHost:4000/juboProject/orders`, _prevOrdersData[orderId]);\n  //         return [..._prevOrdersData];\n  //       })}\n  //       onBlur={() => setIsEditable(false)}\n  //       fullWidth=\"true\"\n  //                         maxWidth={'md'}\n  //       variant=\"outlined\"\n  //             </TextField>\n  //   </div>\n  //     <Button size=\"small\"\n  //       variant=\"outlined\"\n  //       onClick={handleRemove}\n  //       startIcon={<DeleteIcon />}\n  //       // style={{ top: 2, right: 2 }}\n  //     >\n  //     </Button>\n  //   }\n  // ));\n\n  function changeToNewOrders(changedMessage, id, ordersData) {\n    let newOrdersData = [...ordersData];\n    let newOrder = { ...newOrdersData[id]\n    };\n    newOrder.Message = changedMessage;\n    newOrdersData[id] = newOrder;\n    return {\n      newOrdersData\n    };\n  }\n\n  ;\n\n  if (!isReady) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Patient list and orders\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"patientList\",\n          children: patientList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          onClose: handleClose,\n          open: isOpen,\n          \"aria-labelledby\": \"customized-dialog-title\",\n          fullWidth: \"true\",\n          maxWidth: 'md',\n          fullHeight: \"80vh\",\n          maxHeight: 'md',\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"card\",\n            variant: \"outlined\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(CardActions, {\n              classes: {\n                buttonPos: classes.buttonPos\n              },\n              position: \"absolute\",\n              right: \"2%\",\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                justify: \"flex-end\",\n                alignItems: \"flex-end\",\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  mx: 1.5,\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    size: \"small\",\n                    variant: \"contained\",\n                    onClick: handleAdd,\n                    color: \"primary\",\n                    startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 227,\n                      columnNumber: 34\n                    }, this),\n                    style: {\n                      top: 2,\n                      right: 2\n                    },\n                    children: \"Add\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 223,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  mx: 1.5,\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    size: \"small\",\n                    variant: \"contained\",\n                    onClick: handleEdit,\n                    color: \"secondary\",\n                    startIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 238,\n                      columnNumber: 34\n                    }, this),\n                    style: {\n                      top: 2,\n                      right: 2\n                    },\n                    children: \"Edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: \"cardContent\",\n                color: \"textSecondary\",\n                paragraph: true,\n                children: [\"Editing orders for \", patients[orderId].Name, \" ...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                width: \"80%\",\n                fullWidth: \"true\",\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  label: patients[orderId].Name,\n                  disabled: !isEditable,\n                  value: prevOrdersData[orderId].Message,\n                  onChange: e => setOrdersData(prevOrdersData => {\n                    var _prevOrdersData = prevOrdersData;\n                    _prevOrdersData[orderId].Message = e.target.value;\n                    updataData('http://localHost:4000/juboProject/orders', _prevOrdersData[orderId]);\n                    return [..._prevOrdersData];\n                  }),\n                  onBlur: () => setIsEditable(false) // fullWidth=\"false\"\n                  ,\n                  maxWidth: 'md',\n                  variant: \"outlined\"\n                }, orderId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"small\",\n                  variant: \"outlined\" // onClick={handleRemove}\n                  ,\n                  startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 32\n                  }, this) // style={{ top: 2, right: 2 }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"DUTh/I8drg7KlQRYhl5VAq4chGQ=\", true);\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jeffe/Desktop/react-app/my-app/src/App.js"],"names":["React","useEffect","Button","Card","EditIcon","AddIcon","DeleteIcon","Dialog","makeStyles","Grid","Typography","CardActions","CardContent","TextField","Box","App","patients","setPatientsState","useState","isOpen","setIsOpen","orderId","setOrderId","isEditable","setIsEditable","prevOrdersData","setOrdersData","isReady","setIsReady","useStyles","root","background","opacity","borderRadius","border","color","height","padding","boxShadow","fontWeight","transition","transform","cards","backgroundColor","width","overflow","margin","flex","display","flexDirection","alignItems","position","buttonSpacing","mx","px","getData","url","data","fetch","method","then","res","json","catch","err","updataData","headers","body","JSON","stringify","mode","response","loadedOrders","loadedPatients","classes","handleEdit","handleAdd","handleClickOpen","id","handleClose","patientList","map","patient","cardHovered","Name","changeToNewOrders","changedMessage","ordersData","newOrdersData","newOrder","Message","buttonPos","top","right","e","_prevOrdersData","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./styles.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, CardActions, CardContent, TextField } from \"@material-ui/core\";\nimport Box from '@material-ui/core/Box';\n\nexport default function App() {\n  const [patients, setPatientsState] = React.useState([]);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [orderId, setOrderId] = React.useState(0);\n  const [isEditable, setIsEditable] = React.useState(false);\n  const [prevOrdersData, setOrdersData] = React.useState([]);\n  const [isReady, setIsReady] = React.useState(false);\n\n  const useStyles = makeStyles({\n    root: {\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n      opacity: '90%',\n      borderRadius: 5,\n      border: 0,\n      color: 'white',\n      height: 48,\n      padding: '0 30px',\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n      fontWeight: 'bold',\n      transition: \"0.1s cubic-bezier(.17, .67, .83, .67)\",\n      '&:hover': {\n        background: \"#fff\",\n        color: \"rgb(39,39,39)\",\n        transform: \"scale(1.1) translateY(-3px)\",\n        boxShadow: '0 3px 5px 2px rgba(232, 232, 232, .3)',\n      },\n    },\n    cards: {\n      backgroundColor: 'transparent',\n      width: '100%',\n      height: '100%',\n      overflow: 'true',\n      margin: '0 30px',\n    },\n    flex: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"flex-right\",\n      position: \"absolute\",\n    },\n    buttonSpacing: {\n      mx: \"auto\",\n      px: \"auto\",\n      display: \"flex\",\n    },\n  });\n\n  async function getData(url) {\n    const data = await fetch(url, { method: 'GET' })\n      .then(res => {\n        return res.json();\n      }).catch((err) => {\n        return err;\n      });\n    return data;\n  };\n\n  function updataData(url, data) {\n    fetch(url, {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data),\n      mode: 'cors',\n    }).then((response) => {\n      return response.json();\n    }).catch((err) => {\n      return err;\n    });\n  };\n\n  useEffect(async () => {\n    var loadedOrders = await getData('http://localhost:4000/juboProject/orders');\n    var loadedPatients = await getData('http://localhost:4000/juboProject/patients');\n    setOrdersData(loadedOrders);\n    setPatientsState(loadedPatients);\n\n    setIsReady(true);\n  }, []);\n\n  const classes = useStyles();\n\n  const handleEdit = () => {\n    setIsEditable(!isEditable);\n  };\n\n  const handleAdd = () => {\n    setIsEditable(!isEditable);\n  };\n\n  const handleClickOpen = (id) => {\n    setIsOpen(true);\n    setOrderId(id);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  // const handleRemove = () => {\n  //   deleteOrder();\n  // };\n\n  const patientList = patients.map((patient, id) => (\n    <div className=\"patientName\">\n      <Button className=\"patientButton\" variant=\"outlined\" size=\"large\"\n        classes={{\n          root: classes.root,\n          cardHovered: classes.root,\n        }}\n        key={id} onClick={() => handleClickOpen(id)}>\n        {patient.Name}\n      </Button>\n    </div>\n  ));\n\n  // const orderList = prevOrdersData[patientId].Message.map((order, orderId) => (\n  //   if (orderId === 0) {\n  //   <div className=\"orderList\">\n  //     <TextField>\n  //       key={orderId}\n  //       label={patients[orderId].Name}\n  //       disabled={!isEditable}\n  //       value={prevOrdersData[orderId].Message}\n  //       onChange={e => setOrdersData(prevOrdersData => {\n  //         var _prevOrdersData = prevOrdersData;\n  //         _prevOrdersData[orderId].Message = e.target.value;\n  //         updataData(`http://localHost:4000/juboProject/orders`, _prevOrdersData[orderId]);\n  //         return [..._prevOrdersData];\n  //       })}\n  //       onBlur={() => setIsEditable(false)}\n  //       fullWidth=\"true\"\n  //                         maxWidth={'md'}\n  //       variant=\"outlined\"\n  //             </TextField>\n  //   </div>\n  // } else {\n  //   <div className=\"orderList\">\n  //     <TextField>\n  //       key={orderId}\n  //       label={patients[orderId].Name}\n  //       disabled={!isEditable}\n  //       value={prevOrdersData[orderId].Message}\n  //       onChange={e => setOrdersData(prevOrdersData => {\n  //         var _prevOrdersData = prevOrdersData;\n  //         _prevOrdersData[orderId].Message = e.target.value;\n  //         updataData(`http://localHost:4000/juboProject/orders`, _prevOrdersData[orderId]);\n  //         return [..._prevOrdersData];\n  //       })}\n  //       onBlur={() => setIsEditable(false)}\n  //       fullWidth=\"true\"\n  //                         maxWidth={'md'}\n  //       variant=\"outlined\"\n  //             </TextField>\n  //   </div>\n  //     <Button size=\"small\"\n  //       variant=\"outlined\"\n  //       onClick={handleRemove}\n  //       startIcon={<DeleteIcon />}\n  //       // style={{ top: 2, right: 2 }}\n  //     >\n  //     </Button>\n  //   }\n  // ));\n\n  function changeToNewOrders(changedMessage, id, ordersData) {\n    let newOrdersData = [...ordersData]\n    let newOrder = { ...newOrdersData[id] }\n    newOrder.Message = changedMessage\n    newOrdersData[id] = newOrder\n    return { newOrdersData }\n  };\n\n  if (!isReady) {\n    return (<div>Loading..</div>);\n  };\n\n  return (\n    <div className=\"App\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h1>Patient list and orders</h1>\n        </div>\n        <div class=\"card-body\">\n          <div className=\"patientList\">\n            {patientList}\n          </div>\n          <Dialog\n            onClose={handleClose}\n            open={isOpen}\n            aria-labelledby=\"customized-dialog-title\"\n            fullWidth=\"true\"\n            maxWidth={'md'}\n            fullHeight=\"80vh\"\n            maxHeight={'md'}\n          >\n            <Card className='card' variant=\"outlined\"\n              display=\"flex\"\n              flexDirection=\"row\"\n            >\n              <CardActions\n                classes={{\n                  buttonPos: classes.buttonPos,\n                }}\n                position=\"absolute\"\n                right=\"2%\"\n              >\n                <Grid container justify=\"flex-end\" alignItems=\"flex-end\">\n                  <Box mx={1.5}>\n                    <Button size=\"small\"\n                      variant=\"contained\"\n                      onClick={handleAdd}\n                      color=\"primary\"\n                      startIcon={<AddIcon />}\n                      style={{ top: 2, right: 2 }}\n                    >\n                      Add\n                  </Button>\n                  </Box>\n                  <Box mx={1.5}>\n                    <Button size=\"small\"\n                      variant=\"contained\"\n                      onClick={handleEdit}\n                      color=\"secondary\"\n                      startIcon={<EditIcon />}\n                      style={{ top: 2, right: 2 }}\n                    >\n                      Edit\n                  </Button>\n                  </Box>\n                </Grid>\n              </CardActions>\n              <CardContent>\n                <Typography\n                  className='cardContent'\n                  color=\"textSecondary\"\n                  paragraph\n                >\n                  Editing orders for {patients[orderId].Name} ...\n                  </Typography>\n                <Box width=\"80%\" fullWidth=\"true\">\n                  <TextField\n                    key={orderId}\n                    label={patients[orderId].Name}\n                    disabled={!isEditable}\n                    value={prevOrdersData[orderId].Message}\n                    onChange={e => setOrdersData(prevOrdersData => {\n                      var _prevOrdersData = prevOrdersData;\n                      _prevOrdersData[orderId].Message = e.target.value;\n                      updataData('http://localHost:4000/juboProject/orders', _prevOrdersData[orderId]);\n                      return [..._prevOrdersData];\n                    })}\n                    onBlur={() => setIsEditable(false)}\n                    // fullWidth=\"false\"\n                    maxWidth={'md'}\n                    variant=\"outlined\"\n                  />\n\n                  <Button size=\"small\"\n                    variant=\"outlined\"\n                    // onClick={handleRemove}\n                    startIcon={<DeleteIcon />}\n                  // style={{ top: 2, right: 2 }}\n                  >\n                  </Button>\n                </Box>\n              </CardContent>\n            </Card>\n          </Dialog>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}