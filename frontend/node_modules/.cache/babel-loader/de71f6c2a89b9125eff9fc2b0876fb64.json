{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeffe\\\\Desktop\\\\react-app\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./styles.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport patientData from \"./patients.json\";\nimport orderData from \"./orders.json\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { Typography } from '@material-ui/core';\nimport { CardActions } from '@material-ui/core';\nimport { CardContent } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const patients = patientData;\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [orderId, setOrderId] = React.useState(0);\n  const [isEditable, setIsEditable] = React.useState(false);\n  const [prevOrdersData, setOrdersData] = React.useState(orderData);\n  const useStyles = makeStyles({\n    root: {\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n      borderRadius: 5,\n      border: 0,\n      color: 'white',\n      height: 48,\n      padding: '0 30px',\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)'\n    },\n    cards: {\n      backgroundColor: 'transparent',\n      width: '100%',\n      height: '100%',\n      overflow: 'true',\n      margin: '0 30px'\n    },\n    cardHovered: {\n      transform: \"scale3d(1.05, 1.05, 1)\"\n    },\n    dialogPaper: {\n      minHeight: '80vh',\n      maxHeight: '80vh'\n    }\n  });\n  const classes = useStyles();\n\n  const handleEdit = () => {\n    setIsEditable(!isEditable);\n  };\n\n  const handleClickOpen = id => {\n    setIsOpen(true);\n    setOrderId(id);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const patientList = patients.map((patient, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patientName\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      className: \"patientButton\",\n      variant: \"outlined\",\n      size: \"large\",\n      classes: {\n        root: classes.root,\n        cardHovered: classes.root\n      },\n      onClick: () => handleClickOpen(id),\n      children: patient.Name\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this));\n\n  function changeToNewOrders(changedMessage, id, ordersData) {\n    let newOrdersData = [...ordersData];\n    let newOrder = { ...newOrdersData[id]\n    };\n    newOrder.Message = changedMessage;\n    newOrdersData[id] = newOrder;\n    return {\n      newOrdersData\n    };\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Patient list and orders\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          className: \"patientList\",\n          classes: {\n            cards: classes.cards\n          },\n          children: patientList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          onClose: handleClose,\n          open: isOpen,\n          \"aria-labelledby\": \"customized-dialog-title\",\n          classes: {\n            dialogPaper: classes.root\n          },\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"card\",\n            variant: \"outlined\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              classes: {\n                dialogPaper: classes.root\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: \"cardContent\",\n                color: \"textSecondary\",\n                paragraph: true,\n                children: \"Editing orders...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                label: patients[orderId].Name,\n                disabled: !isEditable,\n                value: prevOrdersData[orderId].Message,\n                onChange: e => setOrdersData(prevOrdersData => {\n                  var _prevOrdersData = prevOrdersData;\n                  _prevOrdersData[orderId].Message = e.target.value;\n                  return [..._prevOrdersData];\n                }),\n                onBlur: () => setIsEditable(false)\n              }, orderId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: console.log(prevOrdersData)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                variant: \"contained\",\n                onClick: handleEdit,\n                color: \"primary\",\n                startIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 30\n                }, this),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vpd//XK3TEsJNnQ+dJaQc88FsXE=\", true);\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jeffe/Desktop/react-app/my-app/src/App.js"],"names":["React","Button","Card","patientData","orderData","ButtonGroup","SaveIcon","EditIcon","Dialog","Typography","CardActions","CardContent","TextField","makeStyles","App","patients","isOpen","setIsOpen","useState","orderId","setOrderId","isEditable","setIsEditable","prevOrdersData","setOrdersData","useStyles","root","background","borderRadius","border","color","height","padding","boxShadow","cards","backgroundColor","width","overflow","margin","cardHovered","transform","dialogPaper","minHeight","maxHeight","classes","handleEdit","handleClickOpen","id","handleClose","patientList","map","patient","Name","changeToNewOrders","changedMessage","ordersData","newOrdersData","newOrder","Message","e","_prevOrdersData","target","value","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport patientData from \"./patients.json\";\nimport orderData from \"./orders.json\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { Typography } from '@material-ui/core';\nimport { CardActions } from '@material-ui/core';\nimport { CardContent } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport default function App() {\n  const patients = patientData;\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [orderId, setOrderId] = React.useState(0);\n  const [isEditable, setIsEditable] = React.useState(false);\n  const [prevOrdersData, setOrdersData] = React.useState(orderData);\n\n  const useStyles = makeStyles({\n    root: {\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n      borderRadius: 5,\n      border: 0,\n      color: 'white',\n      height: 48,\n      padding: '0 30px',\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    },\n    cards: {\n      backgroundColor: 'transparent',\n      width: '100%',\n      height: '100%',\n      overflow: 'true',\n      margin: '0 30px',\n    },\n    cardHovered: {\n      transform: \"scale3d(1.05, 1.05, 1)\"\n    },\n    dialogPaper: {\n      minHeight: '80vh',\n      maxHeight: '80vh',\n    },\n  });\n\n  const classes = useStyles();\n\n  const handleEdit = () => {\n    setIsEditable(!isEditable);\n  };\n\n  const handleClickOpen = (id) => {\n    setIsOpen(true);\n    setOrderId(id);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const patientList = patients.map((patient, id) => (\n    <div className=\"patientName\">\n      <Button className=\"patientButton\" variant=\"outlined\" size=\"large\"\n        classes={{\n          root: classes.root,\n          cardHovered: classes.root,\n        }}\n        key={id} onClick={() => handleClickOpen(id)}>\n        {patient.Name}\n      </Button>\n    </div>\n  ));\n\n  function changeToNewOrders(changedMessage, id, ordersData) {\n    let newOrdersData = [...ordersData]\n    let newOrder = { ...newOrdersData[id] }\n    newOrder.Message = changedMessage\n    newOrdersData[id] = newOrder\n    return { newOrdersData }\n  };\n\n  return (\n    <div className=\"App\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h1>Patient list and orders</h1>\n        </div>\n        <div class=\"card-body\">\n          <Card className=\"patientList\"\n            classes={{\n              cards: classes.cards,\n            }}>\n            {patientList}\n          </Card>\n          <Dialog\n            onClose={handleClose}\n            open={isOpen}\n            aria-labelledby=\"customized-dialog-title\"\n            classes={{\n              dialogPaper: classes.root,\n            }}\n          >\n            <Card className='card' variant=\"outlined\">\n              <CardContent\n                classes={{\n                  dialogPaper: classes.root,\n                }}>\n                <Typography\n                  className='cardContent'\n                  color=\"textSecondary\"\n                  paragraph\n                >\n                  Editing orders...\n                  </Typography>\n                <TextField\n                  key={orderId}\n                  label={patients[orderId].Name}\n                  disabled={!isEditable}\n                  value={prevOrdersData[orderId].Message}\n                  onChange={e => setOrdersData(prevOrdersData => {\n                    var _prevOrdersData = prevOrdersData;\n                    _prevOrdersData[orderId].Message = e.target.value;\n                    return [..._prevOrdersData];\n                  })}\n                  onBlur={() => setIsEditable(false)}\n                />\n                <div>{console.log(prevOrdersData)}</div>\n              </CardContent>\n              <CardActions>\n                <Button size=\"small\"\n                  variant=\"contained\"\n                  onClick={handleEdit}\n                  color=\"primary\"\n                  startIcon={<EditIcon />}>\n                  Edit\n                  </Button>\n              </CardActions>\n            </Card>\n          </Dialog>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}